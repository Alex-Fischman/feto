[gd_scene load_steps=7 format=2]

[ext_resource path="res://EffectMaterial.tres" type="Material" id=1]
[ext_resource path="res://Scripts/Yeet.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type particles;
render_mode disable_velocity;

const float PI = 3.14159265358979323846;

uniform float DISTANCE : hint_range(0, 1000);
uniform float FADE : hint_range(0, 0.5);
uniform int TRAIL : hint_range(0, 256);
uniform float LOOP_CHANCE : hint_range(0, 1);
uniform float LOOP_RADIUS : hint_range(0, 1);
uniform vec4 color : hint_color;
uniform float COLOR_VARIATION : hint_range(0, 1);

float prng(in uint seed) {
	seed = ((seed >> uint(16)) ^ seed) * uint(73244475);
	seed = ((seed >> uint(16)) ^ seed) * uint(73244475);
	seed = (seed >> uint(16)) ^ seed;
	int s = int(seed);
	if (s == 0) s = 305420679;
	int k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0) s += 2147483647;
	return float(uint(s) % uint(65536)) / 65535.0;
}

mat4 translation(in vec3 v) {
	return mat4(
		vec4(1.0, 0.0, 0.0, 0.0),
		vec4(0.0, 1.0, 0.0, 0.0),
		vec4(0.0, 0.0, 1.0, 0.0),
		vec4(v, 1.0)
	);
}

mat4 scaling(in vec3 v) {
	return mat4(
		vec4(v.x, 0.0, 0.0, 0.0),
		vec4(0.0, v.y, 0.0, 0.0),
		vec4(0.0, 0.0, v.z, 0.0),
		vec4(0.0, 0.0, 0.0, 1.0)
	);
}

mat3 crossProductMatrix(in vec3 v) {
	return mat3(
		vec3(0, -v.z, v.y),
		vec3(v.z, 0, -v.x),
		vec3(-v.y, v.x, 0)
	);
}

mat4 rotation(in vec3 axis, in float angle) {
	return mat4(
		cos(angle) * mat3(1) + 
		sin(angle) * crossProductMatrix(axis) + 
		(1.0 - cos(angle)) * outerProduct(axis, axis)
	);
}

void vertex() {
	float LOOP_TIME = 2.0 * PI * LOOP_RADIUS / DISTANCE;
	float BOUND = FADE + LOOP_TIME / 2.0;
	
	if (RESTART) {
		uint seed = uint(INDEX / TRAIL) + uint(TIME / LIFETIME) + RANDOM_SEED;
		uint i = uint(0);
		CUSTOM.x = prng(seed + i++);
		CUSTOM.y = prng(seed + i++);
		CUSTOM.z = prng(seed + i++) * 100.0;
		CUSTOM.w = prng(seed + i++) * 100.0;
		CUSTOM *= 2.0 * PI;
		VELOCITY.x = 0.0;
		if (prng(seed + i++) > LOOP_CHANCE) VELOCITY.y = -1.0;
		else VELOCITY.y = prng(seed + i++) * (1.0 - BOUND * 2.0) + BOUND;
		
		float angle = COLOR_VARIATION * PI * (prng(seed + i++) * 2.0 - 1.0);
		mat4 color_rotation = rotation(normalize(vec3(1)), angle);
		COLOR = color * color_rotation;
	}
	
	float fade = 0.0;
	if (VELOCITY.x < FADE) fade = mix(0, 1, VELOCITY.x / FADE);
	else if (VELOCITY.x > 1.0 - FADE) fade = mix(0, 1, (1.0 - VELOCITY.x) / FADE);
	else fade = 1.0;
	
	mat4 transform = translation(vec3(
		0.5 * sin(VELOCITY.x * CUSTOM.x + CUSTOM.z),
		0.5 * sin(VELOCITY.x * CUSTOM.y + CUSTOM.w),
		DISTANCE
	));
	float T1 = VELOCITY.y - LOOP_TIME / 2.0;
	float T2 = VELOCITY.y + LOOP_TIME / 2.0;
	if (VELOCITY.y == -1.0)   transform[3].z *= VELOCITY.x;
	else if (VELOCITY.x < T1) transform[3].z *= VELOCITY.x * VELOCITY.y / T1;
	else if (VELOCITY.x > T2) transform[3].z *= (VELOCITY.x * (VELOCITY.y - 1.0) + LOOP_TIME / 2.0) / (T2 - 1.0);
	else {
		transform[3].z *= VELOCITY.y;
		transform *=
			translation(vec3(0, LOOP_RADIUS, 0)) * 
			rotation(vec3(1, 0, 0), 2.0 * PI * (VELOCITY.x - T1) / LOOP_TIME) * 
			translation(vec3(0, -LOOP_RADIUS, 0));
	}
	
	vec3 target = normalize(transform[3].xyz - TRANSFORM[3].xyz);
	vec3 current = normalize(transform[2].xyz);
	transform *= rotation(cross(target, current), acos(dot(target, current)));
	
	transform *= scaling(vec3(fade));
	
	TRANSFORM = transform;
	VELOCITY.x += DELTA / LIFETIME;
}
"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/DISTANCE = 10.0
shader_param/FADE = 0.1
shader_param/TRAIL = 16
shader_param/LOOP_CHANCE = 0.5
shader_param/LOOP_RADIUS = 0.2
shader_param/color = Color( 0, 0.878431, 1, 0.12549 )
shader_param/COLOR_VARIATION = 0.1

[sub_resource type="CapsuleMesh" id=3]
material = ExtResource( 1 )
radius = 0.05
mid_height = 0.1

[sub_resource type="CapsuleShape" id=4]
height = 8.0

[node name="Air" type="Particles"]
amount = 256
visibility_aabb = AABB( -1, -1, 0, 2, 2, 10 )
process_material = SubResource( 2 )
draw_pass_1 = SubResource( 3 )
script = ExtResource( 2 )

[node name="Area" type="Area" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="Area"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 5 )
shape = SubResource( 4 )
